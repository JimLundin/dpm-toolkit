name: Build Database

on:
  workflow_call:
    outputs:
      config-path:
        description: "Path to the config file"
        value: ${{ jobs.build.outputs.config-path }}

env:
  INPUT_DIR: data/input
  OUTPUT_DIR_SQLITE: data/output/sqlite

jobs:
  build:
    runs-on: windows-latest
    outputs:
      config-path: ${{ steps.config.outputs.path }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .

    - name: Cache Access Database Engine
      id: cache-access-engine
      uses: actions/cache@v4
      with:
        path: AccessDatabaseEngine.exe
        key: access-db-engine-2016-x64

    - name: Download Microsoft Access Database Engine
      if: steps.cache-access-engine.outputs.cache-hit != 'true'
      shell: powershell
      run: |
        $url = "https://download.microsoft.com/download/3/5/C/35C84C36-661A-44E6-9324-8786B8DBE231/accessdatabaseengine_X64.exe"
        Invoke-WebRequest -Uri $url -OutFile "AccessDatabaseEngine.exe"

    - name: Install Microsoft Access Database Engine
      shell: powershell
      run: |
        Start-Process -FilePath "AccessDatabaseEngine.exe" -ArgumentList "/quiet" -Wait
    
    - name: Get config path
      id: config
      shell: bash
      run: echo "path=$(opendpm config-path)" >> $GITHUB_OUTPUT
    
    - name: Cache downloaded databases
      id: cache-dbs
      uses: actions/cache@v4
      with:
        path: ${{ env.INPUT_DIR }}
        key: ${{ runner.os }}-databases-${{ hashFiles(steps.config.outputs.path) }}

    - name: Download database files
      if: steps.cache-dbs.outputs.cache-hit != 'true'
      shell: bash
      run: |
        opendpm download ${{ env.INPUT_DIR }}        

    - name: Build SQLite database
      shell: bash
      run: |
        opendpm convert ${{ env.INPUT_DIR }} ${{ env.OUTPUT_DIR_SQLITE }}
        
    - name: Generate models from SQLite
      shell: bash
      run: |
        pip install sqlacodegen
        DB_PATH="${{ env.OUTPUT_DIR_SQLITE }}/dpm.sqlite"
        echo "Generating models from $DB_PATH"
        sqlacodegen "sqlite:///$DB_PATH" --outfile ${{ env.OUTPUT_DIR_SQLITE }}/dpm_models.py --noviews --options nojoined

    - name: Format generated models with ruff
      shell: bash
      run: |
        pip install ruff
        echo "Formatting generated model file with ruff"
        ruff check --fix ${{ env.OUTPUT_DIR_SQLITE }}/dpm_models.py --output-format:concise
        ruff format ${{ env.OUTPUT_DIR_SQLITE }}/dpm_models.py

    - name: Zip SQLite database
      shell: bash
      run: |
          7z a -tzip dpm-sqlite.zip "${{ env.OUTPUT_DIR_SQLITE }}/dpm.sqlite"
          echo "Created zip archive: dpm-sqlite.zip"

    - name: Upload SQLite database artifact
      uses: actions/upload-artifact@v4
      with:
        name: dpm-sqlite-db
        path: dpm-sqlite.zip

    - name: Upload models artifact
      uses: actions/upload-artifact@v4
      with:
        name: dpm-models
        path: ${{ env.OUTPUT_DIR_SQLITE }}/dpm_models.py
